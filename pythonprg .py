# -*- coding: utf-8 -*-
"""PythonPrg2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LtPX2GoMlc01rHd6_icSaySD1-Q3xdHN
"""

# Question 1Task 1
def swap_values(x, y):
    # Check if both x and y are numeric
    if not (isinstance(x, (int, float)) and isinstance(y, (int, float))):
        return -1

    # Swap without using a third variable
    x, y = y, x

    # Print swapped values
    print(f"Swapped values: x = {x}, y = {y}")

    return x, y  # Return swapped values

# Question 1 Task 2
# Invoke find_and_replace function
def find_and_replace(lst, find_value, replace_value):
    """
    Task 1
    - Create a function that searches for all occurrences of a value (find_value) in a given list (lst) and replaces them with another value (replace_value).
    - lst must be a list.
    - Return the modified list.
    """
    return [replace_value if item == find_value else item for item in lst]

# Example usage:
x, y = 5, 10
swap_values(x, y)

# Invoke find_and_replace function
print(find_and_replace([1, 2, 3, 4, 2, 2], 2, 5))
print(find_and_replace(["apple", "banana", "apple"], "apple", "orange"))

#Question 2 Task 1
def find_and_replace(lst, find_val, replace_val):
    """
    Searches for all occurrences of find_val in lst and replaces them with replace_val.

    Parameters:
    - lst (list): The list to search in.
    - find_val: The value to find and replace.
    - replace_val: The value to replace find_val with.

    Returns:
    - list: The modified list with replacements.
    """
    if not isinstance(lst, list):
        raise ValueError("The first argument must be a list.")

    return [replace_val if item == find_val else item for item in lst]

# Example usage:
sample_list = [1, 2, 3, 2, 4, 2]
new_list = find_and_replace(sample_list, 2, 99)
print(new_list)  # Output: [1, 99, 3, 99, 4, 99]

# Question 2 Task 2
# Test case 1: Replace 2 with 5
list1 = [1, 2, 3, 4, 2, 2]
result1 = find_and_replace(list1, 2, 5)
print(result1)  # Output: [1, 5, 3, 4, 5, 5]

# Test case 2: Replace "apple" with "orange"
list2 = ["apple", "banana", "apple"]
result2 = find_and_replace(list2, "apple", "orange")
print(result2)  # Output: ["orange", "banana", "orange"]

#Question 3 Task 1
def update_dictionary(dct, key, value):
    """
    Updates a dictionary with a new key-value pair.

    Parameters:
    - dct (dict): The dictionary to update.
    - key: The key to update or add.
    - value: The new value to assign.

    Returns:
    - dict: The updated dictionary.
    """
    if not isinstance(dct, dict):
        raise ValueError("The first argument must be a dictionary.")

    if key in dct:
        print(f"Key '{key}' already exists with value: {dct[key]}")

    dct[key] = value
    return dct

# Example usage:
sample_dict = {"a": 1, "b": 2}
updated_dict = update_dictionary(sample_dict, "b", 99)
print(updated_dict)  # Output: Key 'b' already exists with value: 2
                     #         {'a': 1, 'b': 99}

updated_dict = update_dictionary(sample_dict, "c", 50)
print(updated_dict)  # Output: {'a': 1, 'b': 99, 'c': 50}

#Question 3 Task 2
# invoke the update_dictionary function using the given scenarios:
# Test case 1: Adding a new key-value pair to an empty dictionary
dict1 = {}
updated_dict1 = update_dictionary(dict1, "name", "Alice")
print(updated_dict1)  # Output: {'name': 'Alice'}

# Test case 2: Updating an existing key in a dictionary
dict2 = {"age": 25}
updated_dict2 = update_dictionary(dict2, "age", 26)
# Output: Key 'age' already exists with value: 25
print(updated_dict2)  # Output: {'age': 26}

# Question 4
def string_reverse(s):
    """
    Reverses a given string.

    Parameters:
    - s (str): The string to be reversed.

    Returns:
    - str: The reversed string.
    """
    if not isinstance(s, str):
        raise ValueError("The input must be a string.")

    return s[::-1]

# Example usage:
reversed_str = string_reverse("hello")
print(reversed_str)  # Output: "olleh"

# Question 4 Task 2
# Task 2
print(string_reverse("Hello World"))  # Output: "dlroW olleH"
print(string_reverse("Python"))       # Output: "nohtyP"

# Question 5
# check_divisibility function by using the modulus operator % to check if the remainder when dividing num by divisor is zero.
# function returns True if num is divisible by divisor (i.e., if the remainder is 0), and False otherwise.
def check_divisibility(num, divisor):
    """
    Task 1
    - Create a function to check if the number (num) is divisible by another number (divisor).
    - Both num and divisor must be numeric.
    - Return True if num is divisible by divisor, False otherwise.
    """
    return num % divisor == 0

# Question 5 # Task 2
# Invoke the function "check_divisibility" using the following scenarios:
# - 10, 2
# - 7, 3
# Task 2
# The function will check if 10 is divisible by 2 (True) and if 7 is divisible by 3 (False).
print(check_divisibility(10, 2))  # Output: True
print(check_divisibility(7, 3))   # Output: False

# Question 6
#def find_first_negative(lst):
#   Task 1
#   - Create a function that finds the first negative number in a list (lst).
#   - Return the first negative number if found, otherwise return "No negatives".
#   - Use a while loop to implement this.
#    return
# This function iterates through the list using a while loop, checking each number
# to see if it's negative. If it finds one, it returns that number; otherwise,
# it returns "No negatives".
def find_first_negative(lst):
    """
    Task 1
    - Create a function that finds the first negative number in a list (lst).
    - Return the first negative number if found, otherwise return "No negatives".
    - Use a while loop to implement this.
    """
    index = 0
    while index < len(lst):
        if lst[index] < 0:
            return lst[index]
        index += 1
    return "No negatives"

# Question 6 # Task 2
# Invoke the function "find_first_negative" using the following scenario:
# - [3, 5, -1, 7, -2, 8]
# - [2, 10, 7, 0]
#  invoke the find_first_negative function with the given scenarios
#
# Task 2
print(find_first_negative([3, 5, -1, 7, -2, 8]))  # Output: -1
print(find_first_negative([2, 10, 7, 0]))          # Output: No negatives

# function will return -1 as the first negative number in the first list, and "No negatives" for the second list because there are no negative numbers in it.

# Question 7 class Car:
    # - Define a class named Car with attributes: make, model, year
    # - Initialize these attributes in the __init__ method
    # - Add a method named describe_car() that prints information about the car as "Year Make Model"
    #    def describe_car(self):
#        print("")

# Answer
# complete the Car class by defining the __init__ method to initialize the attributes and implementing the describe_car method to print the car's information in the specified format.
class Car:
    # - Define a class named Car with attributes: make, model, year
    # - Initialize these attributes in the __init__ method
    # - Add a method named describe_car() that prints information about the car as "Year Make Model"


    def __init__(self, make, model, year):
        self.make = make
        self.model = model
        self.year = year

    def describe_car(self):
        print(f"{self.year} {self.make} {self.model}")

# This class allows you to create a Car object with the make, model, and year
# attributes, and it has a method describe_car() that prints the car's details
# in the format "Year Make Model".

# Question 7 # Task 2
# Create an instance of the Car class with the following attributes and call describe_car method:
# - Make: Toyota, Model: Corolla, Year: 2020
# Task 2
my_car = Car("Toyota", "Corolla", 2020)
my_car.describe_car()  # Output: 2020 Toyota Corolla

# above code creates a Car object with the make "Toyota," model "Corolla,"
# and year 2020, then calls the describe_car method to print the car's information.